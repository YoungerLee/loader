// Code generated by protoc-gen-cpp-tableau-loader. DO NOT EDIT.
// versions:
// - protoc-gen-cpp-tableau-loader v0.4.5
// - protoc                        v3.19.3
// source: item_conf.proto

#pragma once
#include <cstdint>
#include <string>

#include "hub.pc.h"
#include "protoconf/item_conf.pb.h"

namespace tableau {
class ItemConf : public Messager {
 public:
  static const std::string& Name() { return kProtoName; };
  virtual bool Load(const std::string& dir, Format fmt, const LoadOptions* options = nullptr) override;
  const protoconf::ItemConf& Data() const { return data_; };

 private:
  virtual bool ProcessAfterLoad() override final;

 public:
  const protoconf::ItemConf::Item* Get(uint32_t key1) const;

 private:
  static const std::string kProtoName;
  protoconf::ItemConf data_;

  // OrderedMap accessers.
 public:
  using Item_OrderedMap = std::map<uint32_t, const protoconf::ItemConf::Item*>;
  const Item_OrderedMap* GetOrderedMap() const;

 private:
  Item_OrderedMap ordered_map_;

  // Index accessers.
 public:
  using Index_ItemVector = std::vector<const protoconf::ItemConf::Item*>;
  using Index_ItemMap = std::unordered_map<int, Index_ItemVector>;
  const Index_ItemMap& FindItem() const;
  const Index_ItemVector* FindItem(protoconf::FruitType type) const;
  const protoconf::ItemConf::Item* FindFirstItem(protoconf::FruitType type) const;

 private:
  Index_ItemMap index_item_map_;

 public:
  using Index_ItemInfoVector = std::vector<const protoconf::ItemConf::Item*>;
  using Index_ItemInfoMap = std::unordered_map<int32_t, Index_ItemInfoVector>;
  const Index_ItemInfoMap& FindItemInfo() const;
  const Index_ItemInfoVector* FindItemInfo(int32_t param_list) const;
  const protoconf::ItemConf::Item* FindFirstItemInfo(int32_t param_list) const;

 private:
  Index_ItemInfoMap index_item_info_map_;

 public:
  using Index_ItemExtInfoVector = std::vector<const protoconf::ItemConf::Item*>;
  using Index_ItemExtInfoMap = std::unordered_map<int, Index_ItemExtInfoVector>;
  const Index_ItemExtInfoMap& FindItemExtInfo() const;
  const Index_ItemExtInfoVector* FindItemExtInfo(protoconf::FruitType ext_type_list) const;
  const protoconf::ItemConf::Item* FindFirstItemExtInfo(protoconf::FruitType ext_type_list) const;

 private:
  Index_ItemExtInfoMap index_item_ext_info_map_;

 public:
  struct Index_AwardItemKey {
    uint32_t id;
    std::string name;
    bool operator==(const Index_AwardItemKey& other) const { return id == other.id && name == other.name; }
  };
  struct Index_AwardItemKeyHasher {
    std::size_t operator()(const Index_AwardItemKey& key) const { return util::SugaredHashCombine(key.id, key.name); }
  };
  using Index_AwardItemVector = std::vector<const protoconf::ItemConf::Item*>;
  using Index_AwardItemMap = std::unordered_map<Index_AwardItemKey, Index_AwardItemVector, Index_AwardItemKeyHasher>;
  const Index_AwardItemMap& FindAwardItem() const;
  const Index_AwardItemVector* FindAwardItem(const Index_AwardItemKey& key) const;
  const protoconf::ItemConf::Item* FindFirstAwardItem(const Index_AwardItemKey& key) const;

 private:
  Index_AwardItemMap index_award_item_map_;
};

}  // namespace tableau

namespace protoconf {
// Here are some type aliases for easy use.
using ItemConfMgr = tableau::ItemConf;
}  // namespace protoconf
