// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tableau/protobuf/tableau.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tableau_2fprotobuf_2ftableau_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tableau_2fprotobuf_2ftableau_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tableau_2fprotobuf_2ftableau_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tableau_2fprotobuf_2ftableau_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tableau_2fprotobuf_2ftableau_2eproto;
namespace tableau {
class EnumOptions;
struct EnumOptionsDefaultTypeInternal;
extern EnumOptionsDefaultTypeInternal _EnumOptions_default_instance_;
class EnumValueOptions;
struct EnumValueOptionsDefaultTypeInternal;
extern EnumValueOptionsDefaultTypeInternal _EnumValueOptions_default_instance_;
class FieldOptions;
struct FieldOptionsDefaultTypeInternal;
extern FieldOptionsDefaultTypeInternal _FieldOptions_default_instance_;
class WorkbookOptions;
struct WorkbookOptionsDefaultTypeInternal;
extern WorkbookOptionsDefaultTypeInternal _WorkbookOptions_default_instance_;
class WorksheetOptions;
struct WorksheetOptionsDefaultTypeInternal;
extern WorksheetOptionsDefaultTypeInternal _WorksheetOptions_default_instance_;
}  // namespace tableau
PROTOBUF_NAMESPACE_OPEN
template<> ::tableau::EnumOptions* Arena::CreateMaybeMessage<::tableau::EnumOptions>(Arena*);
template<> ::tableau::EnumValueOptions* Arena::CreateMaybeMessage<::tableau::EnumValueOptions>(Arena*);
template<> ::tableau::FieldOptions* Arena::CreateMaybeMessage<::tableau::FieldOptions>(Arena*);
template<> ::tableau::WorkbookOptions* Arena::CreateMaybeMessage<::tableau::WorkbookOptions>(Arena*);
template<> ::tableau::WorksheetOptions* Arena::CreateMaybeMessage<::tableau::WorksheetOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tableau {

enum Type : int {
  TYPE_DEFAULT = 0,
  TYPE_INT32 = 1,
  TYPE_UINT32 = 2,
  TYPE_INT64 = 3,
  TYPE_UINT64 = 4,
  TYPE_DOUBLE = 5,
  TYPE_FLOAT = 6,
  TYPE_BOOL = 7,
  TYPE_STRING = 8,
  TYPE_STRUCT = 10,
  TYPE_DATE = 21,
  TYPE_TIME = 22,
  TYPE_DATETIME = 23,
  TYPE_INCELL_LIST = 24,
  TYPE_INCELL_MAP = 25,
  TYPE_INCELL_STRUCT = 26,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = TYPE_DEFAULT;
constexpr Type Type_MAX = TYPE_INCELL_STRUCT;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum Layout : int {
  LAYOUT_DEFAULT = 0,
  LAYOUT_VERTICAL = 1,
  LAYOUT_HORIZONTAL = 2,
  Layout_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Layout_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Layout_IsValid(int value);
constexpr Layout Layout_MIN = LAYOUT_DEFAULT;
constexpr Layout Layout_MAX = LAYOUT_HORIZONTAL;
constexpr int Layout_ARRAYSIZE = Layout_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Layout_descriptor();
template<typename T>
inline const std::string& Layout_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Layout>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Layout_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Layout_descriptor(), enum_t_value);
}
inline bool Layout_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Layout* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Layout>(
    Layout_descriptor(), name, value);
}
// ===================================================================

class WorkbookOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tableau.WorkbookOptions) */ {
 public:
  inline WorkbookOptions() : WorkbookOptions(nullptr) {}
  ~WorkbookOptions() override;
  explicit constexpr WorkbookOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkbookOptions(const WorkbookOptions& from);
  WorkbookOptions(WorkbookOptions&& from) noexcept
    : WorkbookOptions() {
    *this = ::std::move(from);
  }

  inline WorkbookOptions& operator=(const WorkbookOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkbookOptions& operator=(WorkbookOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkbookOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkbookOptions* internal_default_instance() {
    return reinterpret_cast<const WorkbookOptions*>(
               &_WorkbookOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkbookOptions& a, WorkbookOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkbookOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkbookOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkbookOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkbookOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorkbookOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WorkbookOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkbookOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tableau.WorkbookOptions";
  }
  protected:
  explicit WorkbookOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:tableau.WorkbookOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tableau_2fprotobuf_2ftableau_2eproto;
};
// -------------------------------------------------------------------

class WorksheetOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tableau.WorksheetOptions) */ {
 public:
  inline WorksheetOptions() : WorksheetOptions(nullptr) {}
  ~WorksheetOptions() override;
  explicit constexpr WorksheetOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorksheetOptions(const WorksheetOptions& from);
  WorksheetOptions(WorksheetOptions&& from) noexcept
    : WorksheetOptions() {
    *this = ::std::move(from);
  }

  inline WorksheetOptions& operator=(const WorksheetOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorksheetOptions& operator=(WorksheetOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorksheetOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorksheetOptions* internal_default_instance() {
    return reinterpret_cast<const WorksheetOptions*>(
               &_WorksheetOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WorksheetOptions& a, WorksheetOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(WorksheetOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorksheetOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorksheetOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorksheetOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorksheetOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WorksheetOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorksheetOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tableau.WorksheetOptions";
  }
  protected:
  explicit WorksheetOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTagsFieldNumber = 7,
    kNamerowFieldNumber = 2,
    kTyperowFieldNumber = 3,
    kNoterowFieldNumber = 4,
    kDatarowFieldNumber = 5,
    kNamelineFieldNumber = 8,
    kTransposeFieldNumber = 6,
    kNestedFieldNumber = 10,
    kTypelineFieldNumber = 9,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string tags = 7;
  void clear_tags();
  const std::string& tags() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tags(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tags();
  PROTOBUF_NODISCARD std::string* release_tags();
  void set_allocated_tags(std::string* tags);
  private:
  const std::string& _internal_tags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tags(const std::string& value);
  std::string* _internal_mutable_tags();
  public:

  // int32 namerow = 2;
  void clear_namerow();
  int32_t namerow() const;
  void set_namerow(int32_t value);
  private:
  int32_t _internal_namerow() const;
  void _internal_set_namerow(int32_t value);
  public:

  // int32 typerow = 3;
  void clear_typerow();
  int32_t typerow() const;
  void set_typerow(int32_t value);
  private:
  int32_t _internal_typerow() const;
  void _internal_set_typerow(int32_t value);
  public:

  // int32 noterow = 4;
  void clear_noterow();
  int32_t noterow() const;
  void set_noterow(int32_t value);
  private:
  int32_t _internal_noterow() const;
  void _internal_set_noterow(int32_t value);
  public:

  // int32 datarow = 5;
  void clear_datarow();
  int32_t datarow() const;
  void set_datarow(int32_t value);
  private:
  int32_t _internal_datarow() const;
  void _internal_set_datarow(int32_t value);
  public:

  // int32 nameline = 8;
  void clear_nameline();
  int32_t nameline() const;
  void set_nameline(int32_t value);
  private:
  int32_t _internal_nameline() const;
  void _internal_set_nameline(int32_t value);
  public:

  // bool transpose = 6;
  void clear_transpose();
  bool transpose() const;
  void set_transpose(bool value);
  private:
  bool _internal_transpose() const;
  void _internal_set_transpose(bool value);
  public:

  // bool nested = 10;
  void clear_nested();
  bool nested() const;
  void set_nested(bool value);
  private:
  bool _internal_nested() const;
  void _internal_set_nested(bool value);
  public:

  // int32 typeline = 9;
  void clear_typeline();
  int32_t typeline() const;
  void set_typeline(int32_t value);
  private:
  int32_t _internal_typeline() const;
  void _internal_set_typeline(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tableau.WorksheetOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tags_;
  int32_t namerow_;
  int32_t typerow_;
  int32_t noterow_;
  int32_t datarow_;
  int32_t nameline_;
  bool transpose_;
  bool nested_;
  int32_t typeline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tableau_2fprotobuf_2ftableau_2eproto;
};
// -------------------------------------------------------------------

class FieldOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tableau.FieldOptions) */ {
 public:
  inline FieldOptions() : FieldOptions(nullptr) {}
  ~FieldOptions() override;
  explicit constexpr FieldOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldOptions(const FieldOptions& from);
  FieldOptions(FieldOptions&& from) noexcept
    : FieldOptions() {
    *this = ::std::move(from);
  }

  inline FieldOptions& operator=(const FieldOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldOptions& operator=(FieldOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldOptions* internal_default_instance() {
    return reinterpret_cast<const FieldOptions*>(
               &_FieldOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FieldOptions& a, FieldOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FieldOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tableau.FieldOptions";
  }
  protected:
  explicit FieldOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNoteFieldNumber = 2,
    kKeyFieldNumber = 4,
    kSepFieldNumber = 6,
    kSubsepFieldNumber = 7,
    kRangeFieldNumber = 13,
    kTypeFieldNumber = 3,
    kLayoutFieldNumber = 5,
    kOptionalFieldNumber = 8,
    kMinFieldNumber = 11,
    kMaxFieldNumber = 12,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string note = 2;
  void clear_note();
  const std::string& note() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note();
  PROTOBUF_NODISCARD std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // string key = 4;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string sep = 6;
  void clear_sep();
  const std::string& sep() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sep(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sep();
  PROTOBUF_NODISCARD std::string* release_sep();
  void set_allocated_sep(std::string* sep);
  private:
  const std::string& _internal_sep() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sep(const std::string& value);
  std::string* _internal_mutable_sep();
  public:

  // string subsep = 7;
  void clear_subsep();
  const std::string& subsep() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subsep(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subsep();
  PROTOBUF_NODISCARD std::string* release_subsep();
  void set_allocated_subsep(std::string* subsep);
  private:
  const std::string& _internal_subsep() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subsep(const std::string& value);
  std::string* _internal_mutable_subsep();
  public:

  // string range = 13;
  void clear_range();
  const std::string& range() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_range(ArgT0&& arg0, ArgT... args);
  std::string* mutable_range();
  PROTOBUF_NODISCARD std::string* release_range();
  void set_allocated_range(std::string* range);
  private:
  const std::string& _internal_range() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_range(const std::string& value);
  std::string* _internal_mutable_range();
  public:

  // .tableau.Type type = 3;
  void clear_type();
  ::tableau::Type type() const;
  void set_type(::tableau::Type value);
  private:
  ::tableau::Type _internal_type() const;
  void _internal_set_type(::tableau::Type value);
  public:

  // .tableau.Layout layout = 5;
  void clear_layout();
  ::tableau::Layout layout() const;
  void set_layout(::tableau::Layout value);
  private:
  ::tableau::Layout _internal_layout() const;
  void _internal_set_layout(::tableau::Layout value);
  public:

  // bool optional = 8;
  void clear_optional();
  bool optional() const;
  void set_optional(bool value);
  private:
  bool _internal_optional() const;
  void _internal_set_optional(bool value);
  public:

  // int32 min = 11;
  void clear_min();
  int32_t min() const;
  void set_min(int32_t value);
  private:
  int32_t _internal_min() const;
  void _internal_set_min(int32_t value);
  public:

  // int32 max = 12;
  void clear_max();
  int32_t max() const;
  void set_max(int32_t value);
  private:
  int32_t _internal_max() const;
  void _internal_set_max(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tableau.FieldOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sep_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subsep_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_;
  int type_;
  int layout_;
  bool optional_;
  int32_t min_;
  int32_t max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tableau_2fprotobuf_2ftableau_2eproto;
};
// -------------------------------------------------------------------

class EnumOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tableau.EnumOptions) */ {
 public:
  inline EnumOptions() : EnumOptions(nullptr) {}
  ~EnumOptions() override;
  explicit constexpr EnumOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnumOptions(const EnumOptions& from);
  EnumOptions(EnumOptions&& from) noexcept
    : EnumOptions() {
    *this = ::std::move(from);
  }

  inline EnumOptions& operator=(const EnumOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnumOptions& operator=(EnumOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnumOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnumOptions* internal_default_instance() {
    return reinterpret_cast<const EnumOptions*>(
               &_EnumOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EnumOptions& a, EnumOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(EnumOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnumOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnumOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnumOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnumOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EnumOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnumOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tableau.EnumOptions";
  }
  protected:
  explicit EnumOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:tableau.EnumOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tableau_2fprotobuf_2ftableau_2eproto;
};
// -------------------------------------------------------------------

class EnumValueOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tableau.EnumValueOptions) */ {
 public:
  inline EnumValueOptions() : EnumValueOptions(nullptr) {}
  ~EnumValueOptions() override;
  explicit constexpr EnumValueOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnumValueOptions(const EnumValueOptions& from);
  EnumValueOptions(EnumValueOptions&& from) noexcept
    : EnumValueOptions() {
    *this = ::std::move(from);
  }

  inline EnumValueOptions& operator=(const EnumValueOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnumValueOptions& operator=(EnumValueOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnumValueOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnumValueOptions* internal_default_instance() {
    return reinterpret_cast<const EnumValueOptions*>(
               &_EnumValueOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EnumValueOptions& a, EnumValueOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(EnumValueOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnumValueOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnumValueOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnumValueOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnumValueOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EnumValueOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnumValueOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tableau.EnumValueOptions";
  }
  protected:
  explicit EnumValueOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:tableau.EnumValueOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tableau_2fprotobuf_2ftableau_2eproto;
};
// ===================================================================

static const int kWorkbookFieldNumber = 50000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::tableau::WorkbookOptions >, 11, false >
  workbook;
static const int kWorksheetFieldNumber = 50000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::tableau::WorksheetOptions >, 11, false >
  worksheet;
static const int kFieldFieldNumber = 50000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::tableau::FieldOptions >, 11, false >
  field;
static const int kEnumFieldNumber = 50000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::tableau::EnumOptions >, 11, false >
  enum_;
static const int kEvalueFieldNumber = 50000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::tableau::EnumValueOptions >, 11, false >
  evalue;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkbookOptions

// string name = 1;
inline void WorkbookOptions::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WorkbookOptions::name() const {
  // @@protoc_insertion_point(field_get:tableau.WorkbookOptions.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkbookOptions::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tableau.WorkbookOptions.name)
}
inline std::string* WorkbookOptions::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tableau.WorkbookOptions.name)
  return _s;
}
inline const std::string& WorkbookOptions::_internal_name() const {
  return name_.Get();
}
inline void WorkbookOptions::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkbookOptions::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkbookOptions::release_name() {
  // @@protoc_insertion_point(field_release:tableau.WorkbookOptions.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkbookOptions::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tableau.WorkbookOptions.name)
}

// -------------------------------------------------------------------

// WorksheetOptions

// string name = 1;
inline void WorksheetOptions::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WorksheetOptions::name() const {
  // @@protoc_insertion_point(field_get:tableau.WorksheetOptions.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorksheetOptions::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tableau.WorksheetOptions.name)
}
inline std::string* WorksheetOptions::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tableau.WorksheetOptions.name)
  return _s;
}
inline const std::string& WorksheetOptions::_internal_name() const {
  return name_.Get();
}
inline void WorksheetOptions::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorksheetOptions::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorksheetOptions::release_name() {
  // @@protoc_insertion_point(field_release:tableau.WorksheetOptions.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorksheetOptions::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tableau.WorksheetOptions.name)
}

// int32 namerow = 2;
inline void WorksheetOptions::clear_namerow() {
  namerow_ = 0;
}
inline int32_t WorksheetOptions::_internal_namerow() const {
  return namerow_;
}
inline int32_t WorksheetOptions::namerow() const {
  // @@protoc_insertion_point(field_get:tableau.WorksheetOptions.namerow)
  return _internal_namerow();
}
inline void WorksheetOptions::_internal_set_namerow(int32_t value) {
  
  namerow_ = value;
}
inline void WorksheetOptions::set_namerow(int32_t value) {
  _internal_set_namerow(value);
  // @@protoc_insertion_point(field_set:tableau.WorksheetOptions.namerow)
}

// int32 typerow = 3;
inline void WorksheetOptions::clear_typerow() {
  typerow_ = 0;
}
inline int32_t WorksheetOptions::_internal_typerow() const {
  return typerow_;
}
inline int32_t WorksheetOptions::typerow() const {
  // @@protoc_insertion_point(field_get:tableau.WorksheetOptions.typerow)
  return _internal_typerow();
}
inline void WorksheetOptions::_internal_set_typerow(int32_t value) {
  
  typerow_ = value;
}
inline void WorksheetOptions::set_typerow(int32_t value) {
  _internal_set_typerow(value);
  // @@protoc_insertion_point(field_set:tableau.WorksheetOptions.typerow)
}

// int32 noterow = 4;
inline void WorksheetOptions::clear_noterow() {
  noterow_ = 0;
}
inline int32_t WorksheetOptions::_internal_noterow() const {
  return noterow_;
}
inline int32_t WorksheetOptions::noterow() const {
  // @@protoc_insertion_point(field_get:tableau.WorksheetOptions.noterow)
  return _internal_noterow();
}
inline void WorksheetOptions::_internal_set_noterow(int32_t value) {
  
  noterow_ = value;
}
inline void WorksheetOptions::set_noterow(int32_t value) {
  _internal_set_noterow(value);
  // @@protoc_insertion_point(field_set:tableau.WorksheetOptions.noterow)
}

// int32 datarow = 5;
inline void WorksheetOptions::clear_datarow() {
  datarow_ = 0;
}
inline int32_t WorksheetOptions::_internal_datarow() const {
  return datarow_;
}
inline int32_t WorksheetOptions::datarow() const {
  // @@protoc_insertion_point(field_get:tableau.WorksheetOptions.datarow)
  return _internal_datarow();
}
inline void WorksheetOptions::_internal_set_datarow(int32_t value) {
  
  datarow_ = value;
}
inline void WorksheetOptions::set_datarow(int32_t value) {
  _internal_set_datarow(value);
  // @@protoc_insertion_point(field_set:tableau.WorksheetOptions.datarow)
}

// bool transpose = 6;
inline void WorksheetOptions::clear_transpose() {
  transpose_ = false;
}
inline bool WorksheetOptions::_internal_transpose() const {
  return transpose_;
}
inline bool WorksheetOptions::transpose() const {
  // @@protoc_insertion_point(field_get:tableau.WorksheetOptions.transpose)
  return _internal_transpose();
}
inline void WorksheetOptions::_internal_set_transpose(bool value) {
  
  transpose_ = value;
}
inline void WorksheetOptions::set_transpose(bool value) {
  _internal_set_transpose(value);
  // @@protoc_insertion_point(field_set:tableau.WorksheetOptions.transpose)
}

// string tags = 7;
inline void WorksheetOptions::clear_tags() {
  tags_.ClearToEmpty();
}
inline const std::string& WorksheetOptions::tags() const {
  // @@protoc_insertion_point(field_get:tableau.WorksheetOptions.tags)
  return _internal_tags();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorksheetOptions::set_tags(ArgT0&& arg0, ArgT... args) {
 
 tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tableau.WorksheetOptions.tags)
}
inline std::string* WorksheetOptions::mutable_tags() {
  std::string* _s = _internal_mutable_tags();
  // @@protoc_insertion_point(field_mutable:tableau.WorksheetOptions.tags)
  return _s;
}
inline const std::string& WorksheetOptions::_internal_tags() const {
  return tags_.Get();
}
inline void WorksheetOptions::_internal_set_tags(const std::string& value) {
  
  tags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorksheetOptions::_internal_mutable_tags() {
  
  return tags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorksheetOptions::release_tags() {
  // @@protoc_insertion_point(field_release:tableau.WorksheetOptions.tags)
  return tags_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorksheetOptions::set_allocated_tags(std::string* tags) {
  if (tags != nullptr) {
    
  } else {
    
  }
  tags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tags,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tags_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tableau.WorksheetOptions.tags)
}

// int32 nameline = 8;
inline void WorksheetOptions::clear_nameline() {
  nameline_ = 0;
}
inline int32_t WorksheetOptions::_internal_nameline() const {
  return nameline_;
}
inline int32_t WorksheetOptions::nameline() const {
  // @@protoc_insertion_point(field_get:tableau.WorksheetOptions.nameline)
  return _internal_nameline();
}
inline void WorksheetOptions::_internal_set_nameline(int32_t value) {
  
  nameline_ = value;
}
inline void WorksheetOptions::set_nameline(int32_t value) {
  _internal_set_nameline(value);
  // @@protoc_insertion_point(field_set:tableau.WorksheetOptions.nameline)
}

// int32 typeline = 9;
inline void WorksheetOptions::clear_typeline() {
  typeline_ = 0;
}
inline int32_t WorksheetOptions::_internal_typeline() const {
  return typeline_;
}
inline int32_t WorksheetOptions::typeline() const {
  // @@protoc_insertion_point(field_get:tableau.WorksheetOptions.typeline)
  return _internal_typeline();
}
inline void WorksheetOptions::_internal_set_typeline(int32_t value) {
  
  typeline_ = value;
}
inline void WorksheetOptions::set_typeline(int32_t value) {
  _internal_set_typeline(value);
  // @@protoc_insertion_point(field_set:tableau.WorksheetOptions.typeline)
}

// bool nested = 10;
inline void WorksheetOptions::clear_nested() {
  nested_ = false;
}
inline bool WorksheetOptions::_internal_nested() const {
  return nested_;
}
inline bool WorksheetOptions::nested() const {
  // @@protoc_insertion_point(field_get:tableau.WorksheetOptions.nested)
  return _internal_nested();
}
inline void WorksheetOptions::_internal_set_nested(bool value) {
  
  nested_ = value;
}
inline void WorksheetOptions::set_nested(bool value) {
  _internal_set_nested(value);
  // @@protoc_insertion_point(field_set:tableau.WorksheetOptions.nested)
}

// -------------------------------------------------------------------

// FieldOptions

// string name = 1;
inline void FieldOptions::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FieldOptions::name() const {
  // @@protoc_insertion_point(field_get:tableau.FieldOptions.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldOptions::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tableau.FieldOptions.name)
}
inline std::string* FieldOptions::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tableau.FieldOptions.name)
  return _s;
}
inline const std::string& FieldOptions::_internal_name() const {
  return name_.Get();
}
inline void FieldOptions::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldOptions::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldOptions::release_name() {
  // @@protoc_insertion_point(field_release:tableau.FieldOptions.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldOptions::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tableau.FieldOptions.name)
}

// string note = 2;
inline void FieldOptions::clear_note() {
  note_.ClearToEmpty();
}
inline const std::string& FieldOptions::note() const {
  // @@protoc_insertion_point(field_get:tableau.FieldOptions.note)
  return _internal_note();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldOptions::set_note(ArgT0&& arg0, ArgT... args) {
 
 note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tableau.FieldOptions.note)
}
inline std::string* FieldOptions::mutable_note() {
  std::string* _s = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:tableau.FieldOptions.note)
  return _s;
}
inline const std::string& FieldOptions::_internal_note() const {
  return note_.Get();
}
inline void FieldOptions::_internal_set_note(const std::string& value) {
  
  note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldOptions::_internal_mutable_note() {
  
  return note_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldOptions::release_note() {
  // @@protoc_insertion_point(field_release:tableau.FieldOptions.note)
  return note_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldOptions::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    
  } else {
    
  }
  note_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (note_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    note_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tableau.FieldOptions.note)
}

// .tableau.Type type = 3;
inline void FieldOptions::clear_type() {
  type_ = 0;
}
inline ::tableau::Type FieldOptions::_internal_type() const {
  return static_cast< ::tableau::Type >(type_);
}
inline ::tableau::Type FieldOptions::type() const {
  // @@protoc_insertion_point(field_get:tableau.FieldOptions.type)
  return _internal_type();
}
inline void FieldOptions::_internal_set_type(::tableau::Type value) {
  
  type_ = value;
}
inline void FieldOptions::set_type(::tableau::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tableau.FieldOptions.type)
}

// string key = 4;
inline void FieldOptions::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& FieldOptions::key() const {
  // @@protoc_insertion_point(field_get:tableau.FieldOptions.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldOptions::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tableau.FieldOptions.key)
}
inline std::string* FieldOptions::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:tableau.FieldOptions.key)
  return _s;
}
inline const std::string& FieldOptions::_internal_key() const {
  return key_.Get();
}
inline void FieldOptions::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldOptions::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldOptions::release_key() {
  // @@protoc_insertion_point(field_release:tableau.FieldOptions.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldOptions::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tableau.FieldOptions.key)
}

// .tableau.Layout layout = 5;
inline void FieldOptions::clear_layout() {
  layout_ = 0;
}
inline ::tableau::Layout FieldOptions::_internal_layout() const {
  return static_cast< ::tableau::Layout >(layout_);
}
inline ::tableau::Layout FieldOptions::layout() const {
  // @@protoc_insertion_point(field_get:tableau.FieldOptions.layout)
  return _internal_layout();
}
inline void FieldOptions::_internal_set_layout(::tableau::Layout value) {
  
  layout_ = value;
}
inline void FieldOptions::set_layout(::tableau::Layout value) {
  _internal_set_layout(value);
  // @@protoc_insertion_point(field_set:tableau.FieldOptions.layout)
}

// string sep = 6;
inline void FieldOptions::clear_sep() {
  sep_.ClearToEmpty();
}
inline const std::string& FieldOptions::sep() const {
  // @@protoc_insertion_point(field_get:tableau.FieldOptions.sep)
  return _internal_sep();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldOptions::set_sep(ArgT0&& arg0, ArgT... args) {
 
 sep_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tableau.FieldOptions.sep)
}
inline std::string* FieldOptions::mutable_sep() {
  std::string* _s = _internal_mutable_sep();
  // @@protoc_insertion_point(field_mutable:tableau.FieldOptions.sep)
  return _s;
}
inline const std::string& FieldOptions::_internal_sep() const {
  return sep_.Get();
}
inline void FieldOptions::_internal_set_sep(const std::string& value) {
  
  sep_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldOptions::_internal_mutable_sep() {
  
  return sep_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldOptions::release_sep() {
  // @@protoc_insertion_point(field_release:tableau.FieldOptions.sep)
  return sep_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldOptions::set_allocated_sep(std::string* sep) {
  if (sep != nullptr) {
    
  } else {
    
  }
  sep_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sep,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sep_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sep_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tableau.FieldOptions.sep)
}

// string subsep = 7;
inline void FieldOptions::clear_subsep() {
  subsep_.ClearToEmpty();
}
inline const std::string& FieldOptions::subsep() const {
  // @@protoc_insertion_point(field_get:tableau.FieldOptions.subsep)
  return _internal_subsep();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldOptions::set_subsep(ArgT0&& arg0, ArgT... args) {
 
 subsep_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tableau.FieldOptions.subsep)
}
inline std::string* FieldOptions::mutable_subsep() {
  std::string* _s = _internal_mutable_subsep();
  // @@protoc_insertion_point(field_mutable:tableau.FieldOptions.subsep)
  return _s;
}
inline const std::string& FieldOptions::_internal_subsep() const {
  return subsep_.Get();
}
inline void FieldOptions::_internal_set_subsep(const std::string& value) {
  
  subsep_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldOptions::_internal_mutable_subsep() {
  
  return subsep_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldOptions::release_subsep() {
  // @@protoc_insertion_point(field_release:tableau.FieldOptions.subsep)
  return subsep_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldOptions::set_allocated_subsep(std::string* subsep) {
  if (subsep != nullptr) {
    
  } else {
    
  }
  subsep_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subsep,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subsep_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subsep_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tableau.FieldOptions.subsep)
}

// bool optional = 8;
inline void FieldOptions::clear_optional() {
  optional_ = false;
}
inline bool FieldOptions::_internal_optional() const {
  return optional_;
}
inline bool FieldOptions::optional() const {
  // @@protoc_insertion_point(field_get:tableau.FieldOptions.optional)
  return _internal_optional();
}
inline void FieldOptions::_internal_set_optional(bool value) {
  
  optional_ = value;
}
inline void FieldOptions::set_optional(bool value) {
  _internal_set_optional(value);
  // @@protoc_insertion_point(field_set:tableau.FieldOptions.optional)
}

// int32 min = 11;
inline void FieldOptions::clear_min() {
  min_ = 0;
}
inline int32_t FieldOptions::_internal_min() const {
  return min_;
}
inline int32_t FieldOptions::min() const {
  // @@protoc_insertion_point(field_get:tableau.FieldOptions.min)
  return _internal_min();
}
inline void FieldOptions::_internal_set_min(int32_t value) {
  
  min_ = value;
}
inline void FieldOptions::set_min(int32_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:tableau.FieldOptions.min)
}

// int32 max = 12;
inline void FieldOptions::clear_max() {
  max_ = 0;
}
inline int32_t FieldOptions::_internal_max() const {
  return max_;
}
inline int32_t FieldOptions::max() const {
  // @@protoc_insertion_point(field_get:tableau.FieldOptions.max)
  return _internal_max();
}
inline void FieldOptions::_internal_set_max(int32_t value) {
  
  max_ = value;
}
inline void FieldOptions::set_max(int32_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:tableau.FieldOptions.max)
}

// string range = 13;
inline void FieldOptions::clear_range() {
  range_.ClearToEmpty();
}
inline const std::string& FieldOptions::range() const {
  // @@protoc_insertion_point(field_get:tableau.FieldOptions.range)
  return _internal_range();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldOptions::set_range(ArgT0&& arg0, ArgT... args) {
 
 range_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tableau.FieldOptions.range)
}
inline std::string* FieldOptions::mutable_range() {
  std::string* _s = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:tableau.FieldOptions.range)
  return _s;
}
inline const std::string& FieldOptions::_internal_range() const {
  return range_.Get();
}
inline void FieldOptions::_internal_set_range(const std::string& value) {
  
  range_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldOptions::_internal_mutable_range() {
  
  return range_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldOptions::release_range() {
  // @@protoc_insertion_point(field_release:tableau.FieldOptions.range)
  return range_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldOptions::set_allocated_range(std::string* range) {
  if (range != nullptr) {
    
  } else {
    
  }
  range_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (range_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    range_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tableau.FieldOptions.range)
}

// -------------------------------------------------------------------

// EnumOptions

// string name = 1;
inline void EnumOptions::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& EnumOptions::name() const {
  // @@protoc_insertion_point(field_get:tableau.EnumOptions.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnumOptions::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tableau.EnumOptions.name)
}
inline std::string* EnumOptions::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tableau.EnumOptions.name)
  return _s;
}
inline const std::string& EnumOptions::_internal_name() const {
  return name_.Get();
}
inline void EnumOptions::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EnumOptions::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EnumOptions::release_name() {
  // @@protoc_insertion_point(field_release:tableau.EnumOptions.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EnumOptions::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tableau.EnumOptions.name)
}

// -------------------------------------------------------------------

// EnumValueOptions

// string name = 1;
inline void EnumValueOptions::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& EnumValueOptions::name() const {
  // @@protoc_insertion_point(field_get:tableau.EnumValueOptions.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnumValueOptions::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tableau.EnumValueOptions.name)
}
inline std::string* EnumValueOptions::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tableau.EnumValueOptions.name)
  return _s;
}
inline const std::string& EnumValueOptions::_internal_name() const {
  return name_.Get();
}
inline void EnumValueOptions::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EnumValueOptions::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EnumValueOptions::release_name() {
  // @@protoc_insertion_point(field_release:tableau.EnumValueOptions.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EnumValueOptions::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tableau.EnumValueOptions.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tableau

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tableau::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tableau::Type>() {
  return ::tableau::Type_descriptor();
}
template <> struct is_proto_enum< ::tableau::Layout> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tableau::Layout>() {
  return ::tableau::Layout_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tableau_2fprotobuf_2ftableau_2eproto
