package main

import (
	"flag"
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
)

const version = "0.1.0"

var namespace *string

func main() {
	var flags flag.FlagSet
	namespace = flags.String("namespace", "", "tableau namespace")
	flag.Parse()

	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

// generateFile generates loader files related to protoconf files.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + ".lua"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("-- Code generated by protoc-gen-cpp-tableau-loader. DO NOT EDIT.")
	g.P("-- versions:")
	g.P("-- - protoc-gen-cpp-tableau-loader v", version)
	g.P("-- - protoc                        ", protocVersion(gen))
	g.P()

	generateFileContent(gen, file, g)

	return g
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

// generateFileContent generates the loader definitions.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {

}
